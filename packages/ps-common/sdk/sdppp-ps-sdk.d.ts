// Generated by dts-bundle-generator v9.5.1

import { StoreApi } from 'zustand';

export interface NodeStore<T = any> extends StoreApi<T> {
	getState(): T;
	setState(partial: Partial<T> | ((state: T) => Partial<T>)): void;
	subscribe(listener: (state: T, prevState: T) => void): () => void;
	getInitialState(): T;
}
export interface StreamActionIterator<T> {
	[Symbol.asyncIterator](): AsyncIterableIterator<T>;
}
declare function registerProxyDomains(domains: string): void;
type EventListener$1<T = any> = (data: T) => void;
export declare const sdpppSDK: {
	init(): Promise<void>;
	logger: import("debug").Debugger;
	stores: {
		PhotoshopStore: NodeStore<{
			actions: string[];
			uname: string;
			activeDocumentID: number;
			layers: {
				name: string;
				id: number;
				identify: string;
			}[];
			theme: string;
			sdpppX: Record<string, any>;
			locale: "zh-CN" | "en-US";
			comfyWebviewConnectStatus: "connecting" | "connected" | "disconnected";
			comfyWebviewLoadError: string;
			comfyWebviewLoading: boolean;
			comfyWebviewVersion: string;
			comfyHTTPCode: number;
			comfyURL: string;
			sdkWebviewFocusing: boolean;
			sdkWebviewConnectStatus: "connecting" | "connected" | "disconnected";
			isLogin: boolean;
			isGuest: boolean;
			requestingLogin: boolean;
			loginMessage: string;
			token: string;
			userInfo: Record<string, any>;
			taskLastRun: number;
			canvasThumbnail: string;
			curlayerThumbnail: string;
			canvasStateID?: number | undefined;
			selectionStateID?: string | undefined;
		}>;
		WebviewStore: NodeStore<{
			refreshable: boolean;
			backwardable: boolean;
			loginable: boolean;
			runnable: boolean;
			workBoundaries: Record<number, {
				leftDistance: number;
				topDistance: number;
				rightDistance: number;
				bottomDistance: number;
				width: number;
				height: number;
			}>;
			workBoundaryMaxSizes: Record<number, number>;
			bannerData?: any;
		}>;
		ComfyStore: NodeStore<{
			widgetableStructure: {
				options: Record<string, any>;
				nodes: Record<string, {
					id: string;
					title: string;
					widgets: ({
						options: {
							required: boolean;
							maxCount?: number | undefined;
							maskMode?: boolean | undefined;
						};
						name: string;
						outputType: "images";
						uiWeight: number;
					} | {
						options: {
							required: boolean;
						};
						name: string;
						outputType: "masks";
						uiWeight: number;
					} | {
						options: {
							required: boolean;
						};
						name: string;
						outputType: "string";
						uiWeight: number;
					} | {
						options: {
							required: boolean;
						};
						name: string;
						outputType: "boolean";
						uiWeight: number;
					} | {
						options: {
							required: boolean;
							min?: number | undefined;
							max?: number | undefined;
							step?: number | undefined;
							random?: boolean | undefined;
							slider?: boolean | undefined;
						};
						name: string;
						outputType: "number";
						uiWeight: number;
					} | {
						options: {
							values: string[];
							required: boolean;
							labels?: string[] | undefined;
						};
						name: string;
						outputType: "combo";
						uiWeight: number;
					} | {
						options: {
							values: string[];
							required: boolean;
						};
						name: string;
						outputType: "segment";
						uiWeight: number;
					})[];
					uiWeightSum: number;
				}>;
				widgetableID: string;
				widgetablePath: string;
				nodeIndexes: string[];
				note?: string | undefined;
			};
			widgetableValues: Record<string, any[]>;
			widgetableErrors: Record<string, string>;
			queueSize: number;
			lastError: string;
			progress: number;
			executingNodeTitle: string;
			executingNodeID: string;
			graphProgress: number;
			comfyUserToken: string;
			comfyOrgLoggedIn: boolean;
			comfyOrgAPIKey: string;
			comfyWSState: "connected" | "reconnecting";
			lastRunTime: number;
		}>;
	};
	plugins: {
		ComfyCaller: {
			setNodeTitle: (data: {
				title: string;
				node_id: string;
			}, signal?: AbortSignal) => Promise<{
				success: boolean;
			}>;
			reboot: (data: {}, signal?: AbortSignal) => Promise<{
				success: boolean;
				error?: string | undefined;
			}>;
			setComfyOrgAPIKey: (data: {
				api_key: string;
			}, signal?: AbortSignal) => Promise<{
				success: boolean;
			}>;
			logout: (data: {}, signal?: AbortSignal) => Promise<{
				success: boolean;
			}>;
			setWidgetValue: (data: {
				values: {
					value: string | number | boolean | any[] | Record<string, any>;
					nodeID: string;
					widgetIndex: number;
				}[];
			}, signal?: AbortSignal) => Promise<{
				success: boolean;
			}>;
			openWorkflow: (data: {
				workflow_path: string;
				reset: boolean;
			}, signal?: AbortSignal) => Promise<{
				success: boolean;
			}>;
			openWorkflowJSON: (data: {
				workflow_path: string;
				workflow_content: Record<string, any>;
			}, signal?: AbortSignal) => Promise<{
				success: boolean;
			}>;
			listWorkflows: (data: {
				listMode?: string | undefined;
				sdpppID?: string | undefined;
				sdpppToken?: string | undefined;
			}, signal?: AbortSignal) => Promise<{
				workflows: string[];
				error?: string | undefined;
			}>;
			saveWorkflow: (data: {
				workflow_path: string;
				from_sid?: string | undefined;
			}, signal?: AbortSignal) => Promise<{
				success: boolean;
			}>;
			run: (data: {
				size: number;
			}, signal?: AbortSignal) => Promise<StreamActionIterator<{
				success: boolean;
				images?: {
					url: string;
					thumbnail: string;
				}[] | undefined;
				nodeErrors?: Record<string, string> | undefined;
				prompt_ids?: string[] | undefined;
			}>>;
			stopAll: (data: {}, signal?: AbortSignal) => Promise<{
				success: boolean;
			}>;
		};
		photoshop: {
			manageGuides: (data: {
				action: "create" | "clear";
				rect?: {
					leftDistance: number;
					topDistance: number;
					rightDistance: number;
					bottomDistance: number;
					width: number;
					height: number;
				} | undefined;
			}, signal?: AbortSignal) => Promise<{
				success: boolean;
			}>;
			openImagesFromFile: (data: {
				nativePath: string;
				boundary?: {
					leftDistance: number;
					topDistance: number;
					rightDistance: number;
					bottomDistance: number;
					width: number;
					height: number;
				} | undefined;
			}, signal?: AbortSignal) => Promise<{
				success: boolean;
				width: number;
				height: number;
				documentId: number;
				documentName: string;
			}>;
			getBoundary: (data: {
				type: "curlayer" | "selection";
			}, signal?: AbortSignal) => Promise<{
				leftDistance: number;
				topDistance: number;
				rightDistance: number;
				bottomDistance: number;
				width: number;
				height: number;
			}>;
			getImage: (data: {
				boundary: {
					leftDistance: number;
					topDistance: number;
					rightDistance: number;
					bottomDistance: number;
					width: number;
					height: number;
				} | "canvas" | "curlayer" | "selection";
				content: string;
				imageSize: number;
				imageQuality: number;
				cropBySelection: "positive" | "negative" | "no";
				SkipNonNormalLayer: boolean;
			}, signal?: AbortSignal) => Promise<{
				error?: string | undefined;
				thumbnail_url?: string | undefined;
				file_token?: string | undefined;
				source?: string | undefined;
			}>;
			getMask: (data: {
				reverse: boolean;
				boundary: {
					leftDistance: number;
					topDistance: number;
					rightDistance: number;
					bottomDistance: number;
					width: number;
					height: number;
				} | "canvas" | "curlayer" | "selection";
				content: "canvas" | "curlayer" | "selection";
				imageSize: number;
			}, signal?: AbortSignal) => Promise<{
				error?: string | undefined;
				thumbnail_url?: string | undefined;
				file_token?: string | undefined;
				source?: string | undefined;
			}>;
			importImage: (data: {
				type: "canvas" | "curlayer" | "newdoc" | "smartobject";
				nativePath: string;
				boundary?: {
					leftDistance: number;
					topDistance: number;
					rightDistance: number;
					bottomDistance: number;
					width: number;
					height: number;
				} | "canvas" | "curlayer" | "selection" | undefined;
				sourceWidth?: number | undefined;
				sourceHeight?: number | undefined;
			}, signal?: AbortSignal) => Promise<{
				success: boolean;
				message?: string | undefined;
				error?: string | undefined;
				layers?: {
					identify: string;
				}[] | undefined;
			}>;
			showBoundarySelectionDialog: (data: {
				additionalData?: Record<string, any> | undefined;
			}, signal?: AbortSignal) => Promise<{
				boundary?: "canvas" | "curlayer" | "selection" | undefined;
				cancelled?: boolean | undefined;
			}>;
			selectCanvasImage: (data: {
				additionalData?: Record<string, any> | undefined;
			}, signal?: AbortSignal) => Promise<{
				source?: string | undefined;
				cancelled?: boolean | undefined;
				getImageParams?: {
					boundary: "canvas" | "curlayer" | "selection";
					content: string;
					imageSize: number;
					imageQuality: number;
					cropBySelection: "positive" | "negative" | "no";
				} | undefined;
			}>;
			selectLayerImage: (data: {
				additionalData?: Record<string, any> | undefined;
			}, signal?: AbortSignal) => Promise<{
				source?: string | undefined;
				cancelled?: boolean | undefined;
				getImageParams?: {
					boundary: "canvas" | "curlayer" | "selection";
					content: string;
					imageSize: number;
					imageQuality: number;
					cropBySelection: "positive" | "negative" | "no";
				} | undefined;
			}>;
			selectLayerMask: (data: {
				additionalData?: Record<string, any> | undefined;
			}, signal?: AbortSignal) => Promise<{
				source?: string | undefined;
				cancelled?: boolean | undefined;
				getMaskParams?: {
					reverse: boolean;
					content: "canvas" | "curlayer" | "selection";
					imageSize: number;
				} | undefined;
			}>;
			selectSelectionMask: (data: {
				additionalData?: Record<string, any> | undefined;
			}, signal?: AbortSignal) => Promise<{
				source?: string | undefined;
				cancelled?: boolean | undefined;
				getMaskParams?: {
					reverse: boolean;
					content: "canvas" | "curlayer" | "selection";
					imageSize: number;
				} | undefined;
			}>;
			taskAdd: (data: {
				status: "running" | "completed" | "failed" | "cancelled";
				taskId: string;
				taskName: string;
				startTime: string;
				error?: string | undefined;
				result?: any;
				currentStep?: number | undefined;
				totalSteps?: number | undefined;
				stepDescription?: string | undefined;
				progressPercentage?: number | undefined;
				endTime?: string | undefined;
				errorCode?: string | undefined;
				metadata?: Record<string, any> | undefined;
			}, signal?: AbortSignal) => Promise<{
				success: boolean;
				error?: string | undefined;
			}>;
			taskUpdate: (data: {
				taskId: string;
				status?: "running" | "completed" | "failed" | "cancelled" | undefined;
				error?: string | undefined;
				result?: any;
				taskName?: string | undefined;
				currentStep?: number | undefined;
				totalSteps?: number | undefined;
				stepDescription?: string | undefined;
				progressPercentage?: number | undefined;
				startTime?: string | undefined;
				endTime?: string | undefined;
				errorCode?: string | undefined;
				metadata?: Record<string, any> | undefined;
			}, signal?: AbortSignal) => Promise<{
				success: boolean;
				error?: string | undefined;
			}>;
			taskRemove: (data: {
				taskId: string;
			}, signal?: AbortSignal) => Promise<{
				success: boolean;
				error?: string | undefined;
			}>;
			onTaskFinished: (data: {
				source: string;
				imageResults: string[];
			}, signal?: AbortSignal) => Promise<{}>;
			register: (data: {
				passwordPayload: {
					username: string;
					password: string;
				} | {
					email: string;
					password: string;
				} | {
					password: string;
					phone: string;
				} | {
					password: string;
					identifier: string;
				};
			} | {
				passcodePayload: {
					code: string;
					phone: string;
				} | {
					code: string;
					email: string;
				};
			}, signal?: AbortSignal) => Promise<{}>;
			login: (data: {
				passwordPayload: {
					username: string;
					password: string;
				} | {
					email: string;
					password: string;
				} | {
					password: string;
					phone: string;
				} | {
					password: string;
					identifier: string;
				};
			} | {
				passcodePayload: {
					code: string;
					phone: string;
				} | {
					code: string;
					email: string;
				};
			}, signal?: AbortSignal) => Promise<{}>;
			sendPassCode: (data: {
				email?: string | undefined;
				phone?: string | undefined;
			}, signal?: AbortSignal) => Promise<{}>;
			logout: (data: {}, signal?: AbortSignal) => Promise<{}>;
			guestLogin: (data: {}, signal?: AbortSignal) => Promise<{}>;
			log: (data: {
				level: "info" | "warn" | "error" | "log";
				messages: string[];
			}, signal?: AbortSignal) => Promise<{}>;
			openExternalLink: (data: {
				url: string;
			}, signal?: AbortSignal) => Promise<{
				error?: string | undefined;
			}>;
			getStorage: (data: {
				key: string;
			}, signal?: AbortSignal) => Promise<{
				value: string;
				error?: string | undefined;
			}>;
			setStorage: (data: {
				value: string;
				key: string;
			}, signal?: AbortSignal) => Promise<{
				error?: string | undefined;
			}>;
			removeStorage: (data: {
				key: string;
			}, signal?: AbortSignal) => Promise<{
				error?: string | undefined;
			}>;
			keyboardAction: (data: {
				keycode: string;
			}, signal?: AbortSignal) => Promise<{}>;
			setComfyWebviewURL: (data: {
				url: string;
			}, signal?: AbortSignal) => Promise<{}>;
			getImageBase64: (data: {
				token: string;
			}, signal?: AbortSignal) => Promise<{
				error?: string | undefined;
				base64?: string | undefined;
				mimeType?: string | undefined;
			}>;
			uploadComfyImage: (data: {
				uploadInput: {
					type: "token" | "buffer";
					fileName: string;
					tokenOrBuffer?: any;
				};
				overwrite: boolean;
			}, signal?: AbortSignal) => Promise<{
				name: string;
			}>;
			proxiedFetch: (data: {
				url: string;
				method?: string | undefined;
				headers?: Record<string, string> | undefined;
				body?: any;
				bodyType?: "json" | "formData" | "text" | undefined;
			}, signal?: AbortSignal) => Promise<{
				success: boolean;
				status?: number | undefined;
				data?: any;
				error?: string | undefined;
				headers?: Record<string, string> | undefined;
				statusText?: string | undefined;
			}>;
			openaiImageEdit: (data: {
				apiKey: string;
				baseURL: string;
				imageToken: string;
				prompt: string;
				model: string;
			}, signal?: AbortSignal) => Promise<{
				success: boolean;
				error?: string | undefined;
				imageUrl?: string | undefined;
				apiTime?: number | undefined;
			}>;
			geminiImageGenerate: (data: {
				apiKey: string;
				prompt: string;
				imageInputType: "base64" | "token";
				baseURL?: string | undefined;
				imageInputs?: string[] | undefined;
				imageInput?: string | undefined;
			}, signal?: AbortSignal) => Promise<{
				success: boolean;
				error?: string | undefined;
				imageUrl?: string | undefined;
				apiTime?: number | undefined;
			}>;
			downloadImage: (data: {
				url: string;
			}, signal?: AbortSignal) => Promise<{
				error?: string | undefined;
				width?: number | undefined;
				height?: number | undefined;
				thumbnail_url?: string | undefined;
				nativePath?: string | undefined;
			}>;
			deleteDownloadedImage: (data: {
				nativePaths: string[];
			}, signal?: AbortSignal) => Promise<{
				error?: string | undefined;
			}>;
			requestAndDoSaveImage: (data: {
				nativePaths: string[];
			}, signal?: AbortSignal) => Promise<{
				error?: string | undefined;
			}>;
		};
		fetchProxy: {
			registerProxyDomains: typeof registerProxyDomains;
		};
		sdpppX: any;
	};
	uxpEvent: {
		on: <T = any>(event: string, listener: EventListener$1<T>) => void;
		off: <T = any>(event: string, listener: EventListener$1<T>) => void;
		once: <T = any>(event: string, listener: EventListener$1<T>) => void;
		removeAllListeners: (event?: string) => void;
	};
};

export {};
